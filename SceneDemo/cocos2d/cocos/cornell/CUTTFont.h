//
//  CUTTFont.h
//  Cornell Extensions to Cocos2D
//
//  This method provides a platform-independent way of refering to a loaded True Type
//  font asset. Depending on the need, Cocos2D asks you to refer to a True Type font
//  by either its TTConfig information or its FontAtlas.  This class abstracts both of
//  these into a single package for uniform usage.
//
//  Author: Walker White
//  Version: 12/10/15
//
#ifndef __CU_TTFONT_H__
#define __CU_TTFONT_H__

#include <cocos2d.h>

NS_CC_BEGIN

#pragma mark -
#pragma mark Font Class

class FontLoader;

/**
 * Class provides a reference to a loaded font asset.
 *
 * This class contains both the TTFConfig information and the associated FontAtlas,
 * providing a uniform interface for all applications.  Note that a True Type font 
 * asset is both the source file AND the font size.  Because the font is converted
 * to a texture for usage, different sizes are different fonts.
 *
 * This class uses Cocos2d reference counting for memory management.  The constructors
 * are protected because only the FontLoader should construct fonts.
 */
class CC_DLL TTFont : public Ref {
private:
    /** This macro disables the copy constructor (not allowed on assets) */
    CC_DISALLOW_COPY_AND_ASSIGN(TTFont);
    
protected:
    /** A unique identifier for this font (filre+size) */
    std::string _ident;
    
    /** The source file for the font */
    std::string _source;
    
    /** The font information for constructing the atlas */
    TTFConfig _config;
    
    /** The font texture information */
    FontAtlas* _atlas;
    
    
public:
#pragma mark Attributes
    /**
     * Returns the unique identifier for this font.
     *
     * Because of how font textures are created, each size is considered a
     * separate font. The identifier combines the source file and size.
     *
     * @return the unique identifier for this font.
     */
    const std::string& getName() const { return _ident; }

    /**
     * Returns the source file for this font.
     *
     * @return the source file for this font.
     */
    const std::string& getSource() const { return _source; }

    /**
     * Returns the size of this font.
     *
     * Because of how font textures are created, each size is considered a
     * separate font.
     *
     * @return the size of this font.
     */
    float getSize() const { return _config.fontSize; }

    /**
     * Returns the font atlas for this font.
     *
     * The font atlas is the texture generated by FreeType for this font file
     * and size.  You generally do not need direct access to this.
     *
     * @return the font atlas for this font.
     */
    const TTFConfig& getTTF() const { return _config; }

    /**
     * Returns the font atlas for this font.
     *
     * The font atlas is the texture generated by FreeType for this font file
     * and size.  You generally do not need direct access to this.
     *
     * @return the font atlas for this font.
     */
    const FontAtlas* getAtlas() const { return _atlas; }

private:
#pragma mark Internal Helpers
    /**
     * Creates a string that may be used as a unique identifier for a font, given a source
     * name and size.
     *
     * @param  source   the source file for the font
     * @param  size     the font size
     *
     * @return a string unique to the given parameters
     */
    static std::string buildIdentifier(std::string source, float size);
    
CC_CONSTRUCTOR_ACCESS:
#pragma mark Initializers
    /**
     * Creates a new, uninitialized font object.
     */
    TTFont() : Ref(), _ident(""), _source(""), _atlas(nullptr) {}

    /**
     * Deletes this font object
     *
     * The font should be unloaded before deletion.
     */
    ~TTFont() { CCASSERT(_atlas == nullptr, "Font asset was not unloaded"); }

    /**
     * Creates a new font object for the given source file and size.
     *
     * The font object must have a size in addition to its source file
     *
     * @param  source   the source file for the font
     * @param  size     the font size
     *
     * @return an autoreleased font object
     */
    static TTFont* create(std::string source, float size);
    
    /**
     * Initializes a new sound object for the given source file.
     *
     * The font object must have a size in addition to its source file
     *
     * @param  source   the source file for the font
     * @param  size     the font size
     *
     * @return true if the font was initialized successfully
     */
    bool init(std::string source, float size);
    
    /** Allow the font loader access to the constructors and private helper functions */
    friend class FontLoader;
};

NS_CC_END

#endif /* defined(__CU_TTFONT_H__) */