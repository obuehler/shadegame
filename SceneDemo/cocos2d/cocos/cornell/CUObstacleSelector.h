//
//  CUObstacleSelector.h
//  Cornell Extensions to Cocos2D
//
//  This class implements a selection tool for dragging physics objects with a mouse.
//  It is essentially an instance of b2MouseJoint, but with an API that makes it a lot
//  easier to use. As with all instances of b2MouseJoint, there will be some lag in
//  the drag (though this is true on touch devices in general).  You can adjust the
//  degree of this lag by adjusting the force.  However, larger forces can cause artifacts
//  when dragging an obstacle through other obstacles.
//
//  This file is based on the CS 3152 PhysicsDemo Lab by Don Holden, 2007
//
//  Author: Walker White
//  Version: 12/28/15
//
#ifndef __CU_OBSTACLE_SELECTOR_H__
#define __CU_OBSTACLE_SELECTOR_H__

#include <base/CCRef.h>
#include <Box2D/Dynamics/Joints/b2MouseJoint.h>
#include <Box2D/Dynamics/b2Fixture.h>
#include "CUWorldController.h"

/** The default size of the mouse selector */
#define DEFAULT_MSIZE       0.2f
/** The default update frequence (in Hz) of the joint */
#define DEFAULT_FREQUENCY  10.0f
/** The default damping force of the joint */
#define DEFAULT_DAMPING     0.7f
/** The default force multiplier of the selector */
#define DEFAULT_FORCE    1000.0f

NS_CC_BEGIN

#pragma mark -
#pragma mark Obstacle Selector
/**
 * Selection tool to move and drag physics obstacles
 *
 * This class is essentially an instance of b2MouseJoint, but with an API that makes 
 * it a lot easier to use. It must be attached to a WorldController on creation, and
 * this controller can never change.  If you want a selector for a different 
 * WorldController, make a new instance.
 *
 * As with all instances of b2MouseJoint, there will be some lag in the drag (though 
 * this is true on touch devices in general).  You can adjust the degree of this lag
 * by adjusting the force.  However, larger forces can cause artifacts when dragging 
 * an obstacle through other obstacles.
 */
class CC_DLL ObstacleSelector : public Ref {
private:
    /** This macro disables the copy constructor (not allowed on physics objects) */
    CC_DISALLOW_COPY_AND_ASSIGN(ObstacleSelector);

protected:
    /** The WorldController associated with this selection */
    WorldController* _controller;
    /** The current fixture selected by this tool (may be nullptr) */
    b2Fixture*  _selection;
    /** A default body used as the other half of the mouse joint */
    b2Body*     _ground;
    
    /** A reusable definition for creating a mouse joint */
    b2MouseJointDef   _jointDef;
    /** The current mouse joint, if an item is selected */
    b2MouseJoint*   _mouseJoint;
    
    /** The region of world space to select an object from */
    Rect  _pointer;
    /** The amount to multiply by the mass to move the object */
    float _force;
    

public:
#pragma mark Static Constructors
    /**
     * Creates a new ObstacleSelector for the given WorldController
     *
     * This controller can never change.  If you want a selector for a different
     * WorldController, make a new instance.
     *
     * This constructor uses the default mouse size.
     *
     * @param  controller   the physics controller
     *
     * @retain a reference to the world controller
     * @return an autoreleased selector object
     */
    static ObstacleSelector* create(WorldController* controller);

    /**
     * Creates a new ObstacleSelector for the given WorldController and mouse size.
     *
     * This controller can never change.  If you want a selector for a different
     * WorldController, make a new instance.  However, the mouse size can be changed
     * at any time.
     *
     * @param  controller   the physics controller
     *
     * @retain a reference to the world controller
     * @return an autoreleased selector object
     */
    static ObstacleSelector* create(WorldController* controller, const Size& mouseSize);

    
#pragma mark Selection Methods
    /**
     * Returns true if a physics body is currently selected
     *
     * @return true if a physics body is currently selected
     */
    bool isSelected() const { return _selection != nullptr; }
    
    /**
     * Returns the Obstacle selected (if any)
     *
     * Just because a physics body was selected does not mean that an Obstacle was
     * selected.  The body could be a basic Box2d body generated by other means. 
     * If the body is not an Obstacle, this method returns nullptr.
     *
     * @return the Obstacle selected (if any)
     */
    Obstacle* getObstacle();
    
    /**
     * Returns true if a physics body was selected at the given position.
     *
     * This method contructs and AABB the size of the mouse pointer, centered at the
     * given position.  If any part of the AABB overlaps a fixture, it is selected.
     *
     * @param  pos  the position (in physics space) to select
     *
     * @return true if a physics body was selected at the given position.
     */
    bool select(const Vec2& pos);
    
    /**
     * Moves the selected body to the given position.
     *
     * @param  pos  the position (in physics space) to move to
     *
     * If nothing is selected, this method does nothing.
     */
    void moveTo(const Vec2& pos);
    
    /**
     * Deselects the physics body, discontinuing any mouse movement.
     *
     * The body may still continue to move of its own accord.  
     */
    void deselect();
    
    /**
     * Callback function for mouse selection.
     *
     * This is the callback function used by the method queryAABB to select a physics
     * body at the current mouse location.
     *
     * @param  fixture  the fixture selected
     *
     * @return false to terminate the query.
     */
    bool onQuery(b2Fixture* fixture);

    
#pragma mark Attribute Properties
    /**
     * Returns the response speed of the mouse joint
     *
     * See the documentation of b2JointDef for more information on the response speed.
     * 
     * @return the response speed of the mouse joint
     */
    float getFrequency() const { return _jointDef.frequencyHz; }
    
    /**
     * Sets the response speed of the mouse joint
     *
     * See the documentation of b2JointDef for more information on the response speed.
     *
     * @param  speed    the response speed of the mouse joint
     */
    void setFrequency(float speed) { _jointDef.frequencyHz = speed; }
    
    /**
     * Returns the damping ratio of the mouse joint
     *
     * See the documentation of b2JointDef for more information on the damping ratio.
     *
     * @return the damping ratio of the mouse joint
     */
    float getDamping() const { return _jointDef.dampingRatio; }
    
    /**
     * Sets the damping ratio of the mouse joint
     *
     * See the documentation of b2JointDef for more information on the damping ratio.
     *
     * @param  ration   the damping ratio of the mouse joint
     */
    void setDamping(float ratio) { _jointDef.dampingRatio = ratio; }
    
    /**
     * Returns the force multiplier of the mouse joint
     *
     * The mouse joint will move the attached fixture with a force of this value times
     * the object mass.
     *
     * @return the force multiplier of the mouse joint
     */
    float getForce() const { return _force; }
    
    /**
     * Sets the force multiplier of the mouse joint
     *
     * The mouse joint will move the attached fixture with a force of this value times
     * the object mass.
     *
     * @param  force    the force multiplier of the mouse joint
     */
    void setForce(float force) { _force = force; }
    
    /**
     * Returns the size of the mouse pointer
     *
     * When a selection is made, this selector will create an axis-aligned bounding box centered
     * at the mouse position.  Any fixture overlapping this box will be selected.  The size of
     * this box is determined by this value.
     *
     * @return the size of the mouse pointer
     */
    const Size& getMouseSize() const { return _pointer.size; }

    /**
     * Sets the size of the mouse pointer
     *
     * When a selection is made, this selector will create an axis-aligned bounding box centered
     * at the mouse position.  Any fixture overlapping this box will be selected.  The size of
     * this box is determined by this value.
     *
     * @param  size the size of the mouse pointer
     */
    void setMouseSize(const Size& size) { _pointer.size = size; }
    
    
#pragma mark Initializers
CC_CONSTRUCTOR_ACCESS:
    /**
     * Creates a new ObstacleSelector
     *
     * The selector created is not usable.  This constructor only initializes default values.  
     * Use the init method to properly intialize the selector.
     */
    ObstacleSelector(void) : _controller(nullptr), _selection(nullptr), _ground(nullptr), _mouseJoint(nullptr) {}
    
    /**
     * Disposes of this selector, releasing all resources.
     */
    ~ObstacleSelector(void);
    
    /**
     * Initializes a new ObstacleSelector for the given WorldController
     *
     * This controller can never change.  If you want a selector for a different
     * WorldController, make a new instance.
     *
     * This initializer uses the default mouse size.
     *
     * @param  controller   the physics controller
     *
     * @retain a reference to the world controller
     * @return  true if the obstacle is initialized properly, false otherwise.
     */
    bool init(WorldController* controller) { return init(controller, Size(DEFAULT_MSIZE, DEFAULT_MSIZE)); }

    /**
     * Initializes a new ObstacleSelector for the given WorldController and mouse size.
     *
     * This controller can never change.  If you want a selector for a different
     * WorldController, make a new instance.  However, the mouse size can be changed
     * at any time.
     *
     * @param  controller   the physics controller
     *
     * @retain a reference to the world controller
     * @return  true if the obstacle is initialized properly, false otherwise.
     */
    bool init(WorldController* controller, const Size& mouseSize);

};



NS_CC_END

#endif /* __CU_OBSTACLE_SELECTOR_H__ */
